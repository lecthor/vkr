- name: Установить пакет Bacula Client'а
  community.general.apt_rpm:
    pkg:
      bacula13-client
    state: present
    update_cache: yes

- include_tasks: roles/common/tasks/opt_bacula.yml

- template:
    src: templates/bacula-fd.j2
    dest: /etc/bacula/bacula-fd.conf
    owner: root
    group: bacula
    mode: 0640
    backup: yes

- file:
    path: /etc/bacula/crt
    state: directory
    mode: 0750
    owner: root
    group: bacula

- ansible.builtin.stat:
    path: "{{ encrypt_keypair_path }}"
  register: encrypt_keys

- block:
    - name: Генерация закрытого ключа OpenSSL
      community.crypto.openssl_privatekey:
        path: "{{ encrypt_private_key_path }}"
        size: "{{ encrypt_key_size | default(2048) }}"

    - name: Создаём самоподписанный сертификат
      community.crypto.x509_certificate:
        path: "{{ encrypt_private_cert_path }}"
        privatekey_path: "{{ encrypt_private_key_path }}"
        provider: selfsigned

    - ansible.builtin.slurp:
        src: "{{ encrypt_private_key_path }}"
      register: cert_key

    - ansible.builtin.slurp:
        src: "{{ encrypt_private_cert_path }}"
      register: cert_cert

    - name: Создаём криптопару для шифрования резервных копий
      lineinfile:
        path: "{{ encrypt_keypair_path }}"
        state: present
        line: "{{ cert_key['content'] | b64decode }}{{ cert_cert['content'] | b64decode }}"
        create: yes
  # Ключи должны быть созданы только один раз, иначе не сможем расшифровать старые резервные копии
  when: not encrypt_keys.stat.exists

- name: Проверка итоговой конфигурации File Daemon'а
  lineinfile:
    line: ""
    path: /etc/bacula/bacula-fd.conf
    validate: bacula-fd -t -c %s
